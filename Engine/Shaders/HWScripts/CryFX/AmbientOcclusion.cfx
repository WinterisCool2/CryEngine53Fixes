// CRYENGINE Source Code File
// Copyright 2001-2015 Crytek GmbH. All rights reserved.

#include "Common.cfi" 
#include "ModificatorVT.cfi"
#include "ShadeLib.cfi" 

// Shader global descriptions
float Script : STANDARDSGLOBAL
<
  string Script =
           "NoPreview;"
           "LocalConstants;"
           "ShaderDrawType = Custom;"
           "ShaderType = PostProcess;"
>;

Texture2D<float4> sceneDepthTexture : TS_ZTarget;

sampler2D TerrainInfoSampler0  : register(s1);
sampler2D TerrainInfoSampler1  : register(s2);

float4 AOSectorRange;
float4 TerrainAOInfo;
float4x4 CompMatrix : PI_Composite < vsregister = c0; >;


struct vert2frag_TerrainAO
{
	float4 HPosition	:	POSITION;
	half4 ScreenTC		:	TEXCOORD0;
	half3 WS_ViewVect:	TEXCOORD1;
};

struct app2vertShadowTerrain
{
  IN_P
  IN_TBASE
  float3 viewDir : TEXCOORD1;
};

vert2frag_TerrainAO Deferred_TerrainAO_Pass_VS(app2vertShadowTerrain IN)
{
	vert2frag_TerrainAO OUT = (vert2frag_TerrainAO)0; 

	OUT.HPosition = mul(CompMatrix, IN.Position);
	OUT.ScreenTC.xy = IN.baseTC.xy;
	OUT.ScreenTC.zw = GetScaledScreenTC(IN.baseTC.xy * (g_VS_ScreenSize.xy * .25f));
	OUT.WS_ViewVect = IN.viewDir;

	return OUT;
}

pixout Deferred_TerrainAO_Pass_PS(vert2frag_TerrainAO IN)
{
  pixout OUT;

  // reconstruct pixel world position
  half SceneDepth = GetLinearDepth( sceneDepthTexture, IN.ScreenTC.xy );  
	float3 vWSPos = vfViewPos.xyz + IN.WS_ViewVect * SceneDepth;

  // find terrain texture coordinates
  half2 texCoord = vWSPos.yx * TerrainAOInfo.a - AOSectorRange.yx;

  // get terrain and vegetation elevations
	half4 dataS0 = GetTexture2D( TerrainInfoSampler0, texCoord );
	half4 dataS1 = GetTexture2D( TerrainInfoSampler1, texCoord );
	half fTerrainZ = dataS1.a * AOSectorRange.w + AOSectorRange.z;
	half fVegetZMax = fTerrainZ + dataS1.g * 32.h;

  // get initial sky amount, TODO: try pow() here
	OUT.Color = saturate(1.h-TerrainAOInfo.g*(fVegetZMax-vWSPos.z)); 

  // scale based on sky amount precomputed for terrain
	half fTerrainSkyAmount = dataS0.a * saturate(1.h - (fTerrainZ-vWSPos.z)*0.025h);
  OUT.Color = lerp(OUT.Color,1.h,fTerrainSkyAmount);

  // lerp into pure terrain sky amount near the ground
  half fHeightFactor = saturate((vWSPos.z-fTerrainZ)*0.5h);
  OUT.Color = lerp(fTerrainSkyAmount,OUT.Color,fHeightFactor);

  // apply sky brightening and fade on distance
  half fDistAtt = saturate(SceneDepth*TerrainAOInfo.b);
	fDistAtt *= fDistAtt;
	OUT.Color = lerp(1.h, OUT.Color, TerrainAOInfo.r * (1.h - fDistAtt)); 

  return OUT;
}

technique Deferred_TerrainAO_Pass
{
	//Shadow pass
  pass p0
  {
    VertexShader = Deferred_TerrainAO_Pass_VS();
    
    ZEnable = false;
    ZWriteEnable = false;
    CullMode = None;

    PixelShader = Deferred_TerrainAO_Pass_PS();
  }
}
