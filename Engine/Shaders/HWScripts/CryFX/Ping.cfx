// CRYENGINE Source Code File
// Copyright 2001-2015 Crytek GmbH. All rights reserved.

#include "Common.cfi"

// Shader global descriptions
float Script : STANDARDSGLOBAL
<
	string Script =
		"Public;"
		"SupportsAttrInstancing;"
		"ShaderDrawType = General;"
		"ShaderType = FX;";
>;

////////////////////////////////////////////////////////////////////////////////////////////////////

#include "ShadeLib.cfi"
#include "ModificatorVT.cfi"
#include "ModificatorTC.cfi"

////////////////////////////////////////////////////////////////////////////////////////////////////
// uniforms - set by system

float4x4	mCamera			: PB_CameraMatrix;
float4		RandGenParams	: PB_RandomParams;
float4		AmbientOpacity	: PI_AmbientOpacity;
float4		GlowParams		: PB_GlowParams;
float4x4	mUnproj			: PB_UnProjMatrix;

float		AnimGenParams = { PB_time 1.0};

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
// samplers

Texture2D ringGradTex : register(t9)  = TM_Custom;
Texture2D rimGradTex  : register(t10) =  TM_CustomSecondary;

////////////////////////////////////////////////////////////////////////////////////////////////////
// uniforms - tweakable parameters

// controls the depth intersection line

half IntersectionWeight
<
	register = REG_PM_PARAM_0.x;
	string UIName = "Intersection weight";
	string UIHelp = "Set weight of intersection";	
	string UIWidget = "slider";
	float UIMin = 0.0;
	float UIMax = 10.0;
	float UIStep = 0.001;
> = 1.0;

half IntersectionRingSoftening
<
	register = REG_PM_PARAM_0.y;
	string UIName = "Intersection ring soft";
	string UIHelp = "Set intersection ring softening";	
	string UIWidget = "slider";	
	float UIMin = 0.0;
	float UIMax = 10.0;
	float UIStep = 0.001;
> = 1.0;

half IntersectionRimSoftening
<
	register = REG_PM_PARAM_0.z;
	string UIName = "Intersection rim soft";
	string UIHelp = "Set intersection rim softening";	
	string UIWidget = "slider";	
	float UIMin = 0.0;
	float UIMax = 10.0;
	float UIStep = 0.001;
> = 4.0;

// controls the silhouette edge line

half RimWeight
<
	register = REG_PM_PARAM_0.w;
	string UIName = "Rim weight";	
	string UIHelp = "Set weight of rim";
	string UIWidget = "slider";
	float UIMin = 0.0;
	float UIMax = 10.0;
	float UIStep = 0.001;
> = 1.0;

float OuterRimPower
<
	register = REG_PM_PARAM_1.x;
	string UIName = "Outer rim power";	
	string UIHelp = "Set fresnel-like exponent of outer rim";
	string UIWidget = "slider";
	float UIMin = 0.0;
	float UIMax = 10.0;
	float UIStep = 0.001;
> = 3.0;

float InnerRimPower
<
	register = REG_PM_PARAM_1.y;
	string UIName = "Inner rim power";	
	string UIHelp = "Set fresnel-like exponent of inner rim";
	string UIWidget = "slider";
	float UIMin = 0.0;
	float UIMax = 5.0;
	float UIStep = 0.001;
> = 0.5;

float NoiseOctave0
<
	register = REG_PM_PARAM_1.z;
	string UIName = "Noise U octave ";
	string UIHelp = "Set noise octave for tex coord U";	
	string UIWidget = "slider";
	float UIMin = 0.0;
	float UIMax = 10.0;
	float UIStep = 0.001;
> = 4.0;

float NoiseOctave1
<
	register = REG_PM_PARAM_1.w;
	string UIName = "Noise V octave ";
	string UIHelp = "Set noise octave for tex coord V";	
	string UIWidget = "slider";
	float UIMin = 0.0;
	float UIMax = 10.0;
	float UIStep = 0.001;
> = 0.5;

float DepthOffset
<
  register = REG_PM_PARAM_2.x;
  string UIName = "Depth offset";  
  string UIWidget = "slider";
  float UIMin = 0.0;
  float UIMax = 10.0;
  float UIStep = 0.001;
> = 0.1;

////////////////////////////////////////////////////////////////////////////////////////////////////
// common functions used in shader

float2	ComputeDepthIntersection(in float fZObject, in float2 tcProj, out float fZBuffer)
{
	fZBuffer	= GetLinearDepth(sceneDepthSampler, tcProj) * PS_NearFarClipDist.y;
	float fZDiff= fZBuffer - fZObject;

	float2	fZInter = (float2)0;
	fZInter.x	= saturate( 1- abs(fZDiff) / IntersectionRingSoftening );
	fZInter.y	= saturate(saturate(fZDiff) / IntersectionRimSoftening );
	fZInter	*= fZInter;
	
	return	fZInter * IntersectionWeight;
}

float	ComputeRim(in float3 vNormal, in float3 vView)
{
	float	fNdotV	= dot(vNormal, vView);
	float	fEdge   = abs(fNdotV);
	return	(pow(1 - fEdge, OuterRimPower) * 10 * RimWeight + pow( fEdge, InnerRimPower)) * 0.1 *RimWeight; 
}

float	GenNoise(Texture2D noiseTex, in float2 baseTC, in float2 octaveTC, in float2 offset, in float2 animSpeed, in float noiseOffset)
{
	return GetDiffuseTex(noiseTex, baseTC * octaveTC + offset + animSpeed + noiseOffset * 0.05).x;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////
// vertex to fragment interpolator

struct v2fPing
{
	float4	HPosition	: POSITION;
	float4	vWorldPos	: TEXCOORDN;
	float4	baseTC		: TEXCOORDN;
	float4	objTC		: TEXCOORDN;
	float4	screenPos	: TEXCOORDN;

	float4	vView		: TEXCOORDN;
	float4	vTangent	: TEXCOORDN;
	float4	vBinormal	: TEXCOORDN;
};

//////////////////////////////////////////////////
// vertex shader

v2fPing PingVS(app2vertGeneral IN)
{
	v2fPing	OUT = (v2fPing)0;

	// screen space position
	streamPos vertPassPos = (streamPos)0;
	streamPos_FromGeneral(IN, vertPassPos);

	OUT.vWorldPos	= vertPassPos.Position;
	OUT.HPosition	= Pos_VS_General(g_VS_ViewProjZeroMatr, vertPassPos);	
	OUT.baseTC.xy	= vertPassPos.baseTC.xy;

	// projected refraction texture
	OUT.screenPos	= HPosToScreenTC(OUT.HPosition);

	//tangent space
	float3 worldTangentS = normalize( mul((const float3x3)vertPassPos.InstMatrix, vertPassPos.ObjToTangentSpace[0]) );
	float3 worldTangentT = normalize( mul((const float3x3)vertPassPos.InstMatrix, vertPassPos.ObjToTangentSpace[1]) );
	float3 worldTangentN = (cross(worldTangentS, worldTangentT)) * vertPassPos.Tangent.w;
	OUT.vTangent = float4(worldTangentS, vertPassPos.Tangent.w); 
	OUT.vBinormal.xyz = worldTangentT;
	
	// view and depth
	OUT.vView.xyz	= vertPassPos.WorldPos.xyz;
	OUT.vView.w		= -mul( (float3x3)mCamera, OUT.vView.xyz ).z;

	// tc animation
	float3	vNorm = vertPassPos.ObjToTangentSpace[2];
	float4	baseTC = vertPassPos.baseTC;
	_TCModify(baseTC, OUT.baseTC, vertPassPos.Position, vNorm, TS_DIFFUSE);
	float4	bumpTC;
	_TCModify(baseTC, bumpTC, vertPassPos.Position, vNorm, TS_DIFFUSE);
	OUT.baseTC.zw = bumpTC.xy;

	OUT.objTC.xyz	= mul(vertPassPos.InstMatrix, vertPassPos.Position).xyz + g_VS_WorldViewPos.xyz;
	//TCModify(OUT.objTC, OUT.objTC, vertPassPos.Position, vNorm, TS_DIFFUSE);

	//Z trick
#if %_RT_REVERSE_DEPTH
	DepthOffset = -DepthOffset;
#endif

	OUT.HPosition.z -= DepthOffset;

	return OUT;
}

//////////////////////////////////////////////////
// pixel shader

pixout PingPS(v2fPing IN)
{
	pixout OUT		= (pixout)0;
	half4 cFinal	= (half4)1;	

	//compute ping line
	float	fZBuffer	= 0;
	float2	tcProj		= IN.screenPos.xy / IN.screenPos.w;
	float3	vNormal		= cross(IN.vTangent.xyz, IN.vBinormal.xyz).xyz * IN.vTangent.w;
	float2	fZInter		= ComputeDepthIntersection(IN.vView.w, tcProj, fZBuffer);
	float	fEdge		= ComputeRim(normalize(vNormal), normalize(IN.vView.xyz)) * fZInter.y;

	half3	cRing	= GetTexture2D(ringGradTex, ssMaterialTrilinearClamp, fZInter)	* MatDifColor.xyz;
	half3	cRim	= GetTexture2D(rimGradTex, ssMaterialTrilinearClamp, fEdge)		* MatSpecColor.xyz;

	half2 	vNoise[2]	= {(half2)0,(half2)0};

	[unroll]
	for(int i = 0; i < 3; ++i)
	{
		int current = i % 2;
		int next = (i+1)% 2;
		half  anim		= AnimGenParams * lerp(-1, 1, current);
		half2 anims		= half2(anim, i*anim*0.2);
		half2 offset	= lerp(half2(0.2, 0.7), half2(0.4, 0.2), current);
		half2 scale		= lerp(half2(NoiseOctave0, NoiseOctave1), half2(4*NoiseOctave0, 2*NoiseOctave1), current);

		vNoise[current]	= half2(
			GenNoise(diffuseTex, IN.baseTC.xy, scale, offset, anims, vNoise[next].x),
			GenNoise(specularTex, IN.baseTC.xy, scale, offset, anims, vNoise[next].y)
		);

		vNoise[current]	= saturate( vNoise[current] * 2 - 1);
		vNoise[current]	*= vNoise[current];
		vNoise[current]	*= vNoise[current];
		vNoise[current]	*= vNoise[current];
		vNoise[current] += vNoise[next];
	}
	cRing	*= vNoise[0].x;
	cRim	*= vNoise[0].y;

	//final color
	cFinal.xyz	=  (cRing + cRim) * GlowParams.xyz;
	cFinal.w	=  0;
	cFinal		*= min(AmbientOpacity.w, 0.99);

	//output
	HDROutput(OUT, cFinal, 1);

	return OUT;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
// technique

technique General
{
	pass p0
	{
		VertexShader	= PingVS() GeneralVS;
		PixelShader		= PingPS() GeneralPS;

		ZEnable = true;
		ZWriteEnable = false;
		CullMode = None;
		
		//candidate for fix?
		SrcBlend = ONE;
		DestBlend = ONE;
		AlphaBlendEnable = true; 
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
//eof
