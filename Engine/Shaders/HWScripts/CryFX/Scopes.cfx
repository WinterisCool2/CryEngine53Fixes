// CRYENGINE Source Code File
// Copyright 2001-2015 Crytek GmbH. All rights reserved.

#include "Common.cfi"
#include "ShadeLib.cfi"
#include "ModificatorVT.cfi"

#if %REFLEX_SIGHT
  #if %REFLEX_SIGHT_NEW
    #undefine %REFLEX_SIGHT_NEW
  #endif    
#endif

#if %SCOPE_ZOOMED_REFRACTION
	#if %REFLEX_SIGHT
		#undefine %REFLEX_SIGHT
	#endif
	#if %REFLEX_SIGHT_NEW
		#undefine %REFLEX_SIGHT_NEW
	#endif
#endif

// Shader global descriptions
float Script : STANDARDSGLOBAL
<
	string Script =
		"Public;"             
		"ShaderDrawType = General;"
		"ShaderType = FX;"
		
#if !%SCOPE_ZOOMED_REFRACTION
		"AfterPostProcess;"
#endif

#if %SCOPE_ZOOMED_REFRACTION
		"Refractive;"
#endif		
>;

////////////////////////////////////////////////////////////////

float4  AnimGenParams = { PB_time 1.0, PB_time 0.5, PB_time 0.25, PB_time 0.125};

float4 RandGenParams : PB_RandomParams;
float4 GlowParams : PB_GlowParams;
float4 StereoParams : PB_StereoParams;
float4 CameraFrontVector : PB_CameraFront;


Texture2D reflexSightSampler : register(t0) =  TM_Diffuse;

sampler2D noiseMapSampler
{
  Texture = EngineAssets/Textures/JumpNoiseHighFrequency_x27y19.dds;
  MinFilter = POINT;
  MagFilter = POINT;
  MipFilter = POINT; 
  AddressU = Wrap;
  AddressV = Wrap;	
};

ENVIRONMENTCUBEMAP

sampler2D envMapSamplerRefr
{
  Texture = $SceneTarget;
  MinFilter = POINT;
  MagFilter = POINT;
  MipFilter = POINT;  
  AddressU = Clamp;
  AddressV = Clamp;   
  sRGBLookup = true; 
};

sampler2D thermalVisionSampler
{
  Texture = $SceneDiffuse;
  MinFilter = POINT;
  MagFilter = POINT;
  MipFilter = POINT;  
  AddressU = Clamp;
  AddressV = Clamp;    
};

/// Specific data ////////////////////////

#if !%SCOPE_ZOOMED_REFRACTION
float ScopeScale
<  
  register = REG_PM_PARAM_0.x;
  string UIName = "Scope scale";        
  string UIWidget = "slider";
  float UIMin = 0.0;
  float UIMax = 100.0;
  float UIStep = 0.05;
> = 4;

float NoiseScale
<  
  register = REG_PM_PARAM_0.y;
  string UIName = "Noise scale";        
  string UIWidget = "slider";
  float UIMin = 0.0;
  float UIMax = 1.0;
  float UIStep = 0.05;
> = 0.75;

#if %HOLO_SIGHT

float HoloDepth
<  
	register = REG_PM_PARAM_0.z;
	string UIName = "Hologram depth";        
	string UIWidget = "slider";
	float UIMin = 0.0;
	float UIMax = 10.0;
	float UIStep = 0.05;
> = 2.0;

#define ObjectUV	1.0f

#else
float ObjectUV
<  
  register = REG_PM_PARAM_0.w;
  string UIName = "Object space UV usage";        
  string UIWidget = "slider";
  float UIMin = 0.0;
  float UIMax = 1.0;
  float UIStep = 1.0;
> = 0.0;
#endif // %HOLO_SIGHT

#if %REFLEX_SIGHT_NEW
float ScopeColorMultiplier
<  
	register = REG_PM_PARAM_1.x;
	string UIName = "Scope color multiplier";        
	string UIWidget = "slider";
	float UIMin = 0.0;
	float UIMax = 16.0;
	float UIStep = 0.05;
> = 4;

float NoiseBias
<  
	register = REG_PM_PARAM_1.y;
	string UIName = "Noise bias";        
	string UIWidget = "slider";
	float UIMin = 0.0;
	float UIMax = 1.0;
	float UIStep = 0.05;
> = 1.0;

float HolographicNoiseScale
<  
	register = REG_PM_PARAM_1.z;
	string UIName = "Holographic noise scale";        
	string UIWidget = "slider";
	float UIMin = 0.0;
	float UIMax = 1.0;
	float UIStep = 0.05;
> = 0.0;

float FakeGlowAmount
<  
	register = REG_PM_PARAM_1.w;
	string UIName = "Fake glow amount";        
	string UIWidget = "slider";
	float UIMin = 0.0;
	float UIMax = 8.0;
	float UIStep = 0.05;
> = 0.25;

#else
float ScopeColorMultiplier
<  
	register = REG_PM_PARAM_2.x;
	string UIName = "Scope color multiplier";        
	string UIWidget = "slider";
	float UIMin = 0.0;
	float UIMax = 256.0;
	float UIStep = 0.05;
> = 160;

#endif
#endif // !%SCOPE_ZOOMED_REFRACTION

#if %SCOPE_ZOOMED_REFRACTION
float ZoomScale
<
	register = REG_PM_PARAM_2.y;
	string UIHelp = "Set scope zoom scale";                     
	string UIName = "Zoom Scale";    
  
	string UIWidget = "slider";
	float UIMin = 0.0;
	float UIMax = 2.0;
	float UIStep = 0.1;
> = 0.1;

float RefrBumpScale
<
	register = REG_PM_PARAM_2.z;
	string UIHelp = "Set refraction bump scale";                     
	string UIName = "Refraction Bump Scale";    
  
	string UIWidget = "slider";
	float UIMin = 0.0;
	float UIMax = 2.0;
	float UIStep = 0.1;
> = 0.1;

// Fresnel parameters
half FresnelScale
<
  register = REG_PM_PARAM_2.w;
  string UIWidget = "slider";
  string UIName = "Fresnel Scale";
  float UIMin = 0.0;
  float UIMax = 32.0;
  float UIStep = 0.01;
> = 1.0;

half FresnelBias
<
  register = REG_PM_PARAM_3.x;
  string UIWidget = "slider";
  string UIName = "Fresnel Bias";  
  float UIMin = 0.0;
  float UIMax = 1.0;
  float UIStep = 0.001;
> = 1;
#endif // %SCOPE_ZOOMED_REFRACTION

///////////////// vertex shader //////////////////

struct v2Frag
{
	float4 HPosition : POSITION;
	float3 baseTC    : TEXCOORDN;    
	float4 screenPos : TEXCOORDN;  

#if %SCOPE_ZOOMED_REFRACTION
	float4 vView     : TEXCOORDN;       
	float4 vTangent  : TEXCOORDN;
	float4 vBinormal : TEXCOORDN;
#endif

#if %HOLO_SIGHT
	float2 vDepthDir : TEXCOORDN;
#endif

	float4 AmbientOp : TEXCOORDN;
};

///////////////// vertex shader //////////////////
v2Frag ScopeVS(app2vertGeneral IN)
{
	v2Frag OUT = (v2Frag)0; 

	// Position in screen space.
	streamPos vertPassPos = (streamPos)0;
	streamPos_FromGeneral(IN, vertPassPos);

	OUT.HPosition = Pos_VS_General(g_VS_ViewProjZeroMatr, vertPassPos);

	OUT.baseTC.xy=vertPassPos.baseTC.xy;

#if !%SCOPE_ZOOMED_REFRACTION	
	// Compute stereo parallax
	float depth = OUT.HPosition.w * StereoParams.w + StereoParams.z;
	float parallax = StereoParams.x * (1.0 - StereoParams.y / depth);
	OUT.HPosition.x -= parallax;
	OUT.baseTC.z = parallax;
#endif
  
	// Output projected refraction texture
	OUT.screenPos = HPosToScreenTC( OUT.HPosition );

#if %SCOPE_ZOOMED_REFRACTION
	// Output tangents only for cases that require it - alpha blending, recursive passes and anisotropic specular

	// Note: Normalization required for normal diffuse map in world space in case scale used - Do not remove
	float3 worldTangentS = normalize( mul((const float3x3)vertPassPos.InstMatrix, vertPassPos.ObjToTangentSpace[0]) );
	float3 worldTangentT = normalize( mul((const float3x3)vertPassPos.InstMatrix, vertPassPos.ObjToTangentSpace[1]) );
	float3 worldTangentN = normalize( mul((const float3x3)vertPassPos.InstMatrix, vertPassPos.ObjToTangentSpace[2]) );

	OUT.vTangent = float4(worldTangentS, vertPassPos.Tangent.w); 
	OUT.vBinormal.xyz = worldTangentT;
	OUT.vView.xyz = vertPassPos.WorldPos.xyz;
#endif

#if %HOLO_SIGHT
	OUT.vDepthDir = normalize(vertPassPos.Position.xyz - ViewPos.xyz).xz;
#endif

	OUT.AmbientOp = AmbientOp;

#if %REFLEX_SIGHT
	// Store sight fall off in AmbientOp.x
	// (The camera is in object space, so the viewing angle is directly proportional to magnitute of the object space position, 
	// hence this can be used as a falloff)
	const half sightFalloffSaturation = 10.0;
	const half sightFalloffIgnore = 0.1;
	OUT.AmbientOp.x = length(normalize(vertPassPos.Position.xyz - ViewPos.xyz).xz);
	OUT.AmbientOp.x = 1.0-saturate((OUT.AmbientOp.x-sightFalloffIgnore)*sightFalloffSaturation);
#endif

	return OUT;
}

///////////////// pixel shader //////////////////

pixout ScopePS(v2Frag IN)
{
  pixout OUT = (pixout) 0;

  half4 cFinal = 1;
#if !%SCOPE_ZOOMED_REFRACTION	
#if %HOLO_SIGHT
	// Offset holographic sight with depth
	IN.baseTC.xy -= 0.5;
	IN.baseTC.xy *= 1.0 + 0.1f * HoloDepth;
	IN.baseTC.xy += 0.5;

	IN.baseTC.xy -= HoloDepth * IN.vDepthDir.xy;
#endif

	// Screen noise
	float2 tcProj = (IN.screenPos/IN.screenPos.w);
	tcProj = lerp(tcProj, IN.baseTC.xy, ObjectUV);

	float2 tcNoise = (PS_ScreenSize.xy/ 64);
	tcNoise = lerp(tcNoise, float2(1,1), ObjectUV);
	 
	// Stereo
	tcProj.x += IN.baseTC.z;

	half fAspectRatio = 0.75;	//PS_ScreenSize.x / PS_ScreenSize.y
	fAspectRatio = lerp(fAspectRatio, 1, ObjectUV);
#endif

#if %REFLEX_SIGHT_NEW
	half fNoise = saturate( tex2D(noiseMapSampler, tcProj * tcNoise + RandGenParams.xy)); 
	fNoise += tex2D(noiseMapSampler, (tcProj * tcNoise + 0.5 - RandGenParams.zw));
	fNoise = saturate( fNoise - 1.0 );
	half fScopeNoise = saturate(NoiseBias + fNoise * saturate(NoiseScale));

	float2 tcDiffuse = saturate( (tcProj - 0.5)*(ScopeScale+ ScopeScale * HolographicNoiseScale* (fNoise*2-1))*float2(1,fAspectRatio) + 0.5 );
	half fEdgeAtten = saturate( 1 - dot(tcDiffuse * 2 - 1, tcDiffuse * 2 - 1) );

	// Fetch, sum up and apply noise
	cFinal = GetDiffuseTex(diffuseTex, tcDiffuse );
	// Add simple fake glow
	cFinal += FakeGlowAmount * ( GetDiffuseTexBias(diffuseTex, float4(tcDiffuse, 0, 2) ) );

	//// Add fake glow (use triangle filter + tex bias)
	// cFinal += FakeGlowAmount * ( GetDiffuseTexBias(diffuseTex, float4(tcDiffuse + ResInfoDiffuse.zw * float2( 0,  1), 0, 2) ) +
	//													  GetDiffuseTexBias(diffuseTex, float4(tcDiffuse + ResInfoDiffuse.zw * float2( 1, -1), 0, 2) ) +
	//													  GetDiffuseTexBias(diffuseTex, float4(tcDiffuse + ResInfoDiffuse.zw * float2(-1, -1), 0, 2) ) );

	cFinal *= fEdgeAtten * fScopeNoise;

	cFinal *= ScopeColorMultiplier;

	cFinal.xyz += cFinal.xyz * GlowParams;

	cFinal.w = saturate(cFinal.w);
	
#if !%THERMAL_SCOPE	
	clip(cFinal.w - 1.0h / 255.h);
#endif

#elif %REFLEX_SIGHT
	// Kept for backward compatibility
	half fNoise = tex2D(noiseMapSampler, tcProj * tcNoise + AnimGenParams.x);
	fNoise += tex2D(noiseMapSampler, (tcProj * tcNoise - AnimGenParams.x)*1.05);
	fNoise *= 0.5;

	float2 tcReflSight =  (tcProj - 0.5)*(ScopeScale + NoiseScale * ScopeScale * (fNoise*2-1))*float2(1,fAspectRatio) + 0.5;
	tcReflSight = saturate( tcReflSight );

	// add fake glow
	NoiseScale = 1;
	ScopeScale *= 0.25;
	float2 tcReflSightGlow =  (tcProj - 0.5)*(ScopeScale + NoiseScale * ScopeScale * (fNoise*2-1))*float2(1,fAspectRatio) + 0.5;
	tcReflSightGlow = saturate( tcReflSightGlow );

	cFinal = GetTexture2DLod(reflexSightSampler, ssMaterialTrilinearClamp, float4(tcReflSight,0,0) );
	cFinal += 0.25 * GetTexture2DLod(reflexSightSampler, ssMaterialBilinearClamp, float4(tcReflSightGlow,0,0) );
	cFinal.w = saturate( cFinal.w *0.75);

	// Apply sight falloff
	cFinal *= IN.AmbientOp.x;

#elif %SCOPE_ZOOMED_REFRACTION
	half4 cDiffuse = GetDiffuseTex(diffuseTex, IN.baseTC.xy); // gloss in diffuse alpha

	half3 vBump = GetNormalMap(normalsTex, IN.baseTC.xy);

	half3 vNormalVtx = (cross(IN.vTangent.xyz, IN.vBinormal.xyz)) * IN.vTangent.w;                  // 4 alu
	half3x3 mTangentToWS = float3x3(IN.vTangent.xyz, IN.vBinormal.xyz, vNormalVtx);  
	half3 vNormal = normalize( mul(vBump.xyz, mTangentToWS) );                                      // 3 alu
	half3 vView = normalize(-IN.vView.xyz);                                                          // 3 alu  

	// Store some constant coeficients
	half fNdotE = ( dot(vView.xyz, vNormal.xyz));                                    // 1 alu
	half3 vReflVec = (2.0h * fNdotE * vNormal.xyz) - vView.xyz;                      // 2 alu  		    

	// Set fresnel
	half fFresnel = saturate(FresnelBias + FresnelScale * pow(1.0h - fNdotE, 5.0)); // 4 inst
	half3 cEnvironment = GetEnvironmentCMap(envCubeTex, vReflVec.xyz, MatSpecColor.w);    

	// Fetch refraction offsets in uv space (we want to fetch always center of screen)
	float2 tcProj = (IN.baseTC.xy - 0.5) * ZoomScale + 0.5 + vBump.xy * RefrBumpScale;

	tcProj = GetScaledScreenTC(tcProj);

	cFinal.xyz = cDiffuse * MatDifColor.xyz * DecodeHDRBuffer( tex2D( envMapSamplerRefr, tcProj ) );
	cFinal.xyz += cDiffuse.w * fFresnel * cEnvironment * MatSpecColor.xyz;
#endif

#if %REFLEX_SIGHT_NEW
	// alpha blended case
	cFinal.a *= IN.AmbientOp.w;
#elif %REFLEX_SIGHT
	// addititive blended case
	cFinal.rgb *= IN.AmbientOp.w;
#endif

#if %THERMAL_SCOPE && !%SCOPE_ZOOMED_REFRACTION
	// Peform manual blending if using thermal scope
	half2 screenTC = IN.screenPos.xy / IN.screenPos.w;
	half3 cThermal = tex2D(thermalVisionSampler, screenTC).rgb;
	
#if %REFLEX_SIGHT_NEW
	// Fade and clip scope edges
	cThermal *= 1 - dot(IN.baseTC.xy*2-1, IN.baseTC.xy*2-1);
	clip(0.7f-dot(IN.baseTC.xy*2-1, IN.baseTC.xy*2-1));
#endif
	
#if %REFLEX_SIGHT_NEW
	cFinal.rgb = lerp(cThermal.rgb, cFinal.rgb, cFinal.a);
#else
	cFinal.rgb = cFinal.rgb + cThermal.rgb * (1.f - cFinal.a);
#endif

	cFinal.a = 1.f;
#endif

  HDROutput(OUT, cFinal, 1); 
  return OUT;
}

//////////////////////////////// technique ////////////////

technique General
{
	pass p0
	{    
		VertexShader = ScopeVS() GeneralVS;
		PixelShader = ScopePS() GeneralPS;


#if !%SCOPE_ZOOMED_REFRACTION
		ZEnable = false; 
#else
		ZEnable = true; 
#endif
		ZFunc = LEqual; 
		ZWriteEnable = false; 

#if !%THERMAL_SCOPE && !%SCOPE_ZOOMED_REFRACTION
#if %REFLEX_SIGHT_NEW
		SrcBlend = SRC_ALPHA;
#else
		SrcBlend = ONE;
#endif

		DestBlend = ONE_MINUS_SRC_ALPHA;
		AlphaBlendEnable = true;
		IgnoreMaterialState = true;	
		CullMode = None;
#endif

#if %SCOPE_ZOOMED_REFRACTION
		CullMode = Back;
#endif		
	}
}

/////////////////////// eof ///
