// CRYENGINE Source Code File
// Copyright 2001-2015 Crytek GmbH. All rights reserved.


// DEPRECATED - please try merging debug functionality into CommonDebugPass


#include "Common.cfi"


// Shader global descriptions
float Script : STANDARDSGLOBAL
<
  string Script =
           "ShaderDrawType = Light;"
           "ShaderType = General;"
>;

float2 TexelsPerMeterInfo : PB_TexelsPerMeterInfo;

float4x4 LayerTexGen      : PB_TerrainLayerGen;
float4 TexelDensityParam  : PB_TexelDensityParam;
float4 TexelDensityColor  : PB_TexelDensityColor;

sampler2D gradientSampler = sampler_state
{
  Texture = EngineAssets/Textures/TexelsPerMeterGrad.tif;
  MinFilter = LINEAR;
  MagFilter = LINEAR;
  MipFilter = NONE; 
  AddressU = Clamp;
  AddressV = Clamp;
};

struct fragPassCustom
{ 

};

struct fragLightPassCustom
{
}; 

#include "ShadeLib.cfi"

// Un-Tweakables /////////////////

ENVIRONMENTCUBEMAP

//////////////////////////////// Common vertex shader ////////////////

#include "VertexLib.cfi"

///////////////// vertex shader //////////////////
vert2FragGeneral SketchVS(app2vertGeneral IN)
{
  vert2FragGeneral OUT = (vert2FragGeneral)0; 
  
	streamPos vertPassPos = (streamPos)0;
  vs_shared_output( IN, OUT, vertPassPos, false );

  return OUT;
}

///////////////// pixel shader //////////////////

void frag_unify_parameters( inout fragPass pPass )
{
  
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void frag_custom_begin(inout fragPass pPass)
{

  pPass.fAlpha = pPass.cDiffuseMap.w * pPass.IN.Ambient.w;
  pPass.vNormal = pPass.mTangentToWS[2];                                      // 3 alu

}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////


void frag_custom_per_light(inout fragPass pPass, inout fragLightPass pLight)
{  
	pPass.cDiffuseAcc.xyz += saturate( pLight.fNdotL ) * pLight.cDiffuse.xyz * pLight.fFallOff * pLight.cFilter;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////


void frag_custom_ambient(inout fragPass pPass, inout half3 cAmbient)
{

	pPass.cAmbientAcc.xyz += pPass.IN.Ambient.xyz;
  
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void frag_custom_end(inout fragPass pPass, inout half3 cFinal)
{
}


#include "fragLib.cfi"

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

pixout SketchPS(vert2FragGeneral IN)
{
	pixout OUT = (pixout) 0;  

  // Initialize fragPass structure
  fragPass pPass = (fragPass) 0;
  frag_unify(pPass, IN);  
  half4 cFinal = frag_shared_output(pPass);
    		  
  HDROutput(OUT, cFinal, 1);

	return OUT;
}



////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
struct vert2FragSketchFast
{  
  OUT_P
  float4 baseTC     : TEXCOORDN;
  
  float4 vTangent  : TEXCOORDN;
  float4 vBinormal : TEXCOORDN;
  float4 Ambient    : TEXCOORDN;
  float4 vView     : TEXCOORDN;
};

vert2FragSketchFast SketchFastVS(app2vertGeneral IN)
{
  vert2FragSketchFast OUT = (vert2FragSketchFast)0; 
  
  //vs_shared_output( IN, OUT, false );
  
  streamPos vertPassPos = (streamPos)0;
  streamPos_FromGeneral(IN, vertPassPos);
  
  OUT.HPosition = Pos_VS_General(g_VS_ViewProjZeroMatr, vertPassPos);
  
  _TCModify(vertPassPos.baseTC, OUT.baseTC, 0, 0, TS_DIFFUSE);
  
  // Output world to tangent matrix and world space position  
  // Note: Normalization required for normal diffuse map in world space in case scale used - Do not remove
  float3 worldTangentS = normalize( mul((const float3x3)vertPassPos.InstMatrix, vertPassPos.ObjToTangentSpace[0]) );
  float3 worldTangentT = normalize( mul((const float3x3)vertPassPos.InstMatrix, vertPassPos.ObjToTangentSpace[1]) );
  float3 worldTangentN = normalize( mul((const float3x3)vertPassPos.InstMatrix, vertPassPos.ObjToTangentSpace[2]) );
  
  OUT.vTangent = float4(worldTangentS, vertPassPos.Tangent.w); 
  OUT.vBinormal.xyz = worldTangentT;
  OUT.vView.xyz = vertPassPos.WorldPos.xyz;
  
  // Output ambient color
  OUT.Ambient = AmbientOp;

  return OUT;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void sketch_frag_unify(inout fragPass pPass, in vert2FragSketchFast IN)
{
  pPass.IN.baseTC = IN.baseTC;
  pPass.IN.bumpTC = pPass.IN.baseTC;
  pPass.IN.vTangent = IN.vTangent;
  pPass.IN.vBinormal = IN.vBinormal;
  pPass.IN.vNormal.xyz = (cross(IN.vTangent.xyz, IN.vBinormal.xyz)) * IN.vTangent.w;                  // 4 alu
  pPass.IN.vView = IN.vView;
  //pPass.IN.screenProj = IN.screenProj;

  pPass.IN.Ambient = IN.Ambient;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
half4 sketch_frag_shared_output(inout fragPass pPass)
{ 
  half4 cOut = 0;
  
  float4 baseTC = pPass.IN.baseTC;

  pPass.vView = normalize(-pPass.IN.vView.xyz);                                                           // 3 alu  
  pPass.mTangentToWS = float3x3(pPass.IN.vTangent.xyz, pPass.IN.vBinormal.xyz, pPass.IN.vNormal.xyz);  
      
  pPass.cDiffuseMap = GetDiffuseTex(diffuseTex, baseTC.xy);  
		    
  // Get main vectors/coeficients	     
  pPass.fAlpha = pPass.cDiffuseMap.w * pPass.IN.Ambient.w;
  pPass.vNormal = pPass.mTangentToWS[2];                                      // 3 alu
  pPass.vNormalDiffuse = pPass.vNormal;

  // Store some constant coeficients
  pPass.fNdotE = ( dot(pPass.vView.xyz, pPass.vNormal.xyz));                                        // 1 alu
  pPass.fGloss = MatSpecColor.w;	
  pPass.vReflVec = (2.0 * pPass.fNdotE * pPass.vNormal.xyz) - pPass.vView.xyz;                      // 2 alu

  half3 vAmbientNormal = pPass.vNormalDiffuse.xyz;

	// Sun lighting
	pPass.cDiffuseAcc.xyz = saturate( dot( g_PS_SunLightDir.xyz, pPass.vNormal.xyz ) ) * g_PS_SunColor.xyz;

  half3 amb = pPass.IN.Ambient.xyz;
  pPass.cAmbientAcc.xyz += pPass.IN.Ambient.xyz;
        
  cOut.xyz = ( pPass.cAmbientAcc.xyz + pPass.cDiffuseAcc.xyz ) * pPass.cDiffuseMap.xyz;           // 2 alu  
  
  // distance blend out
  cOut.w = pPass.fAlpha;
    
  return cOut;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
pixout SketchFastPS(vert2FragSketchFast IN)
{
	pixout OUT = (pixout) 0;  

	// Initialize fragPass structure
	fragPass pPass = (fragPass) 0;

	sketch_frag_unify(pPass, IN);  
	half4 cFinal = sketch_frag_shared_output(pPass);

	OUT.Color = cFinal;

	return OUT;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
pixout SketchTexelsPerMeterPS(vert2FragSketchFast IN)
{
	pixout OUT = (pixout) 0;  

	// sample diffuse tex so texture modificator in VS gets properly applied
	// multiply by very small number and use result so compiler doesn't optimize tex fetch away
	float3 c = GetDiffuseTex(diffuseTex, IN.baseTC.xy) * 0.0001;

	float3 ddx_P = ddx(IN.vView.xyz);
	float3 ddy_P = ddy(IN.vView.xyz);

	float2 ddx_T = ddx(IN.baseTC.xy);
	float2 ddy_T = ddy(IN.baseTC.xy);

	float tx = length(ddx_T) / length(ddx_P) * TexelsPerMeterInfo.x;
	float ty = length(ddy_T) / length(ddy_P) * TexelsPerMeterInfo.y;

	float t = max(tx, ty);

	c += GetTexture2D(gradientSampler, float2(t, 0.25));

	float2 p = frac(IN.baseTC.xy * ResInfoDiffuse.xy / 16.0); // 16x16 texels are a 2x2 checkerboard block
	float checker = p.x < 0.5 ? (p.y < 0.5 ? 0.9 : 1) : (p.y < 0.5 ? 1 : 0.9);

	OUT.Color = float4(c * checker, 1);

	return OUT;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
pixout SketchTexelDensityPS(vert2FragSketchFast IN)
{
	pixout OUT = (pixout) 0;  

	float2 p = frac(IN.baseTC.xy * TexelDensityParam.xy / 32.0); // 32x32 texels are a 2x2 checkerboard block
	float color = (p.y < 0.5 ? 1 : 0.0);
	float checker = p.x < 0.5 ? 1-color : color;

	OUT.Color.xyz = 0.1 * GetDiffuseTex(diffuseMap, IN.baseTC.xy)+0.9*float3(checker*TexelDensityColor.xyz);
	OUT.Color.w = 1;//IN.Color.g;

	return OUT;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////// technique ////////////////

technique General
{
  pass p0
  {
    VertexShader = SketchFastVS() GeneralVS;
    PixelShader = SketchFastPS() GeneralPS;
    
    ZEnable = true;
    ZWriteEnable = true;
		ZFunc = LEqual;
    CullMode = Back;       
  }
}

//////////////////////////////// technique ////////////////

technique TexelsPerMeter
{
  pass p0
  {
    VertexShader = SketchFastVS() GeneralVS;
    PixelShader = SketchTexelsPerMeterPS() GeneralPS;
    
    ZEnable = true;
    ZWriteEnable = true;
		ZFunc = LEqual;
    CullMode = Back;       
  }
}

//////////////////////////////// technique ////////////////

technique TexelDensity
{
  pass p0
  {
    VertexShader = SketchFastVS() GeneralVS;
    PixelShader = SketchTexelDensityPS() GeneralPS;
    
    ZEnable = true;
    ZWriteEnable = true;
		ZFunc = LEqual;
    CullMode = Back;       
  }
}

//////////////////////////////// helper techniques ////////////////
technique General1
{
  pass p0
  {
    VertexShader = SketchVS() GeneralVS;
    PixelShader = SketchPS() GeneralPS;
    
    ZEnable = true;
    ZWriteEnable = true;
		ZFunc = LEqual;
    CullMode = Back;       
  }
}

technique General2
{
  pass p0
  {
    VertexShader = SketchVS() GeneralVS;
    PixelShader = SketchPS() GeneralPS;
    
    ZEnable = true;
    ZWriteEnable = true;
		ZFunc = LEqual;
    CullMode = Back;       
  }
}

technique Fast
{
  pass p0
  {
    VertexShader = SketchVS() GeneralVS;
    PixelShader = SketchPS() GeneralPS;
    
    ZEnable = true;
    ZWriteEnable = true;
		ZFunc = LEqual;
    CullMode = Back;       
  }
}

/////////////////////// eof ///
